#
# A third-hello-world config.
#

# Assorted prefix declarations. Some of them are for the structuring
# of the API config, others are for the vocabulary definitions.
#

@prefix api:                <http://purl.org/linked-data/api/vocab#> .
@prefix dct:				<http://purl.org/dc/terms/> .

@prefix rdf:                <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:               <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:                <http://www.w3.org/2001/XMLSchema#> .

# The elda namespace/prefix is for Elda extensions to the LDA specification.
@prefix elda:               <http://www.epimorphics.com/vocabularies/lda#> .
@prefix foaf:               <http://xmlns.com/foaf/0.1/>.

@prefix example:               <http://www.epimorphics.com/vocabularies/lda#example.> .

# Prefix for example-local entities.
@prefix egc:      <https://rawgit.com/epimorphics/elda/gh-pages/demo/vocabularies/games.ttl#>.
@prefix hello:    <https://rawgit.com/epimorphics/elda/gh-pages/demo/vocabularies/games.ttl#games> .
@prefix third:    <https://rawgit.com/epimorphics/elda/gh-pages/demo/vocabularies/games.ttl#third> .
@prefix spec:	<http://environment.data.gov.uk/api-config#> .


# ---------------------------------------------------------------------
# API config

# example authorisation for SPARQL host if expected
#
<http://localhost:8080/fuseki/gp_data_01/sparql>
          elda:authKey "grimdark"
        ; elda:authFile "taods-and-robins"
.
spec:third-hello-world a api:API
    ;rdfs:label "third hello world example games"@en

    ; api:sparqlEndpoint <http://localhost:8080/fuseki/gp_data_01/sparql>
    ; api:base "/elda-common"

    ; api:defaultViewer hello:HtmlFormatter
        ; api:viewer [a api:Viewer; api:name "empty"; api:properties ""]

    ; api:variable [api:name "_velocityPath"; api:value "velocity/"]
    ; api:variable [api:name "_resourceRoot"; api:value "http://localhost:8081/elda-assets/"]

#    ; api:endpoint
#        third:games, hello:catch #, <local:data/rows.ttl> # development debugging

    ; api:endpoint
      spec:about
      , spec:anything
      , spec:mentions

    ; api:formatter
        [a elda:FeedFormatter
        ; api:name "atom"
        ; elda:className "com.epimorphics.lda.renderers.FeedRendererFactory"
        ; api:mimeType "application/atom+xml"
        ; elda:feedTitle "an example Elda feed"
        ]

    ; api:formatter
          [a api:JsonFormatter
          ; api:name "json-ld"
          ; elda:checkJSONLDRoundTrip false
          ; elda:allLiteralsStructured false
          ; elda:className "com.epimorphics.lda.renderers.JSONLDRendererFactory"
          #
          # use /json if client doesn't render json-ld as json, otherwise
          # use /json+ld. Firefox doesn't understand +ld so we'll force to /json
          # for the moment.
          #
          ; api:mimeType "application/json"
          # ; api:mimeType "application/json+ld"
          ]

    ; api:formatter
          [a elda:VelocityFormatter
                  ; api:name "html"
                  ; elda:className "com.epimorphics.lda.renderers.VelocityRendererFactory"
                  ; api:mimeType "text/html"
          ]

    ; elda:enableCounting true
    ; elda:cacheExpiryTime "1m"

    ; elda:disable-default-metadata false

    ; api:variable [ api:name "M"; api:value "Martin" ]
    ; api:variable [ api:name "W"; api:value "Wallace" ]

    ; api:variable
        [ api:name "var_A"
        ; api:value
           [ elda:mapFrom "{M} {W}"
           ; elda:mapWith example:map
           ]
        ]
    .

example:map a elda:SPARQLMap
# ; elda:mapName "http://www.epimorphics.com/vocabularies/lda#example.map"
        ; elda:mapIn "param"
        ; elda:mapQuery
        """
        prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        select ?out where {?out rdfs:label ?param} limit 1
        """
        ; elda:mapOut "out"
    .

#include tobeincluded.ttl

<http://localhost:8080/fuseki>
    elda:textSearchOperand (rdfs:label "?_search" 99)
    .

third:games a api:ListEndpoint
        ; rdfs:label "Games"
        ; api:uriTemplate "/games"
        ; api:selector [api:filter "type=BoardGame"; api:sort "label"]
        ; api:defaultViewer api:labelledDescribeViewer
        ; elda:enableCounting false
    .

hello:catch a api:ListEndpoint
        ; rdfs:label "Catch"
        ; api:uriTemplate "/catch/{caught}"
        ; api:selector [api:filter "type={caught}"; api:sort "label"]
        ; api:defaultViewer api:labelledDescribeViewer
        ; elda:enableCounting false
.


#
# Describe a generic 'thing' as an example of an itemEndpoint.
#
spec:about a api:ItemEndpoint
        ; api:uriTemplate     "/about?resource={uri}"
        ; rdfs:comment        "A generic item endpoint API for asking about a specific thing by 'uri'."
        ; api:itemTemplate    "{uri}"
        ; api:viewer          api:basicViewer, api:describeViewer, api:labelledDescribeViewer
        ; api:defaultViewer   api:describeViewer
.

#
# List 'anything' endpoint
#
spec:anything a api:ListEndpoint
        ; api:name            	"anything"
        ; rdfs:comment        	"A generic listing endpoint for listing things based solely on URI based filter parameters"@en
        ; api:uriTemplate		"/anything"
        ; api:selector			[api:where   " ?item a ?v1 . FILTER (!isBlank(?item)) "]
        ; api:exampleRequestPath  "/anything"
###
### no selector - defers everything to URI params
###
        ; api:viewer api:describeViewer, api:basicViewer, api:labelledDescribeViewer
        ; api:defaultViewer   api:describeViewer
.

#
# List things related to a 'mentions' as an example of a ListEndpoint.
#
spec:mentions a api:ListEndpoint
        ; api:uriTemplate     "/mentions?resource={uri}"
        ; api:variable [api:name "uri"; api:type rdfs:Resource]
        ; api:selector [api:where "?item ?p ?uri . FILTER (!isBlank(?item))"]
        ; api:viewer api:basicViewer, api:describeViewer, api:labelledDescribeViewer
        ; api:defaultViewer   api:describeViewer;
.

